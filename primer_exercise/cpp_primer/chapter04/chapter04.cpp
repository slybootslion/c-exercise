#include "chapter04.h"

namespace chapter04
{
	/*
	练习4.1:表达式5+10*20/2的求值结果是多少?
	105
	 * */

	/*
	 练习4.2:根据4.12节中的表，在下述表达式的合理位置添加括号，使得添加括号后运算对象的组合顺序与添加括号前一致。
		(a) *vec.begin()
	 	(b) *vec.begin() + 1

	 	*(vec.begin())
	 	(*(vec.begin())) + 1
	 * */

	/*
	 练习 4.3:C++语言没有明确规定大多数二元运算符的求值顺序，给编译器优化留下了余地。
	 这种策略实际上是在代码生成效率和程序潜在缺陷之间进行了权衡，你认为这可以接受吗?请说出你的理由。

	 C++的策略是尽可能的让程序运行的更加高效，要是在语法角度强制规定二元运算符的求值顺序，那么
	 必然会导致效率变低，这个是和原则相违背的，所以讲这个控制权下放给编译器，从而达到动态的平衡。
	 所以，可以接受。
	 * */

	/*
	 练习 4.4:在下面的表达式中添加括号，说明其求值的过程及最终结果。编写程序编译该(不加括号的)表达式并输出其结果验证之前的推断。
	 	12 / 3 * 4 + 5 * 15 + 24 % 4 / 2
	 * */
	void q4_4() {
		const int a = 12 / 3 * 4 + 5 * 15 + 24 % 4 / 2;
		const int b = ((12 / 3) * 4) + (5 * 15) + ((24 % 4) / 2);
		cout << a << " " << b << endl;
	}

	/*
	 练习4.5:写出下列表达式的求值结果。
		(a) -30 * 3 + 21 / 5   (b) -30 + 3 * 21 / 5
		(c) 30 / 3 * 21 % 5   (d) -30 / 3 * 21 % 4

	 小学生四则运算题：
	 -86, -18, 0, -2
	 * */

	/*
	 练习 4.6:写出一条表达式用于确定一个整数是奇数还是偶数。

	 x % 2 == 1 ? "奇数" : "偶数"
	 * */

	/*
	练习 4.7:溢出是何含义?写出三条将导致溢出的表达式。
	当计算的结果超出该类型所能表示的范围时就会产生溢出

	 unsigned short z=0;
	 z=z-1; // 溢出
	 cout<< z <<endl; // 输出65535
	 * */

	/*
	 练习4.8:说明在逻辑与、逻辑或及相等性运算符中运算对象求值的顺序。

	 相等性运算符 > 逻辑与 > 逻辑或
	 * */

	/*
	 练习4.9:解释在下面的if 语中条件部分的判断过程。
		const char *cp = "Hello World";
		if (cp && *cp)

	 首先判断指针cp是否为nullptr,要是为nullptr,由于短路特性,之后的*cp就不会运算
  	 要是不为nullptr,则进一步判断*cp是否为"",
  	 这两个运算顺序不能颠倒
	 * */

	/*
	练习 4.10:为 while 循环写一个条件，使其从标准输入中读取整数，遇到42时停止。
	 * */
	void q4_10() {
		int val;
		while (cin >> val && val != 42);
	}

	/*
	练习 4.11:书写一条表达式用于测试 4 个值 a、b、c、d 的关系，确保a 大于b、b大于c、c大于d。

	 a > b && b > c && c > d
	 * */

	/*
	练习 4.12:假设i、j和k是三个整数，说明表达式i!=j<k 的含义。

	 i != (j < k)，先比较j是否小于k，再对比结果（1,0）是否与i不相等。
	 */

	// 感觉这节太基础了，再做没啥意义，后面再回来做吧，重点也是位运算、sizeof之后的内容。
	// 这个章节先

	void main() {
//		q4_4();
//		q4_10();

	}
}
